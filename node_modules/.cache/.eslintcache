[{"/home/qburst/diagnal-app/src/index.js":"1","/home/qburst/diagnal-app/src/App.js":"2","/home/qburst/diagnal-app/src/reportWebVitals.js":"3","/home/qburst/diagnal-app/src/store/reducer.js":"4","/home/qburst/diagnal-app/src/action.js":"5","/home/qburst/diagnal-app/src/types.js":"6","/home/qburst/diagnal-app/src/components/body/index.js":"7","/home/qburst/diagnal-app/src/components/header/index.js":"8","/home/qburst/diagnal-app/src/components/icon/index.js":"9","/home/qburst/diagnal-app/src/components/search/index.js":"10"},{"size":757,"mtime":1652191099000,"results":"11","hashOfConfig":"12"},{"size":756,"mtime":1652191099000,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1652191099000,"results":"14","hashOfConfig":"12"},{"size":885,"mtime":1652191099000,"results":"15","hashOfConfig":"12"},{"size":1164,"mtime":1652191099000,"results":"16","hashOfConfig":"12"},{"size":77,"mtime":1652191099000,"results":"17","hashOfConfig":"12"},{"size":1282,"mtime":1652191099000,"results":"18","hashOfConfig":"12"},{"size":545,"mtime":1652191099000,"results":"19","hashOfConfig":"12"},{"size":199,"mtime":1652191099000,"results":"20","hashOfConfig":"12"},{"size":722,"mtime":1652191099000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16uz8h7",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/qburst/diagnal-app/src/index.js",[],[],"/home/qburst/diagnal-app/src/App.js",["54","55"],[],"import './App.css';\nimport Body from './components/body';\nimport Header from './components/header';\nimport { connect } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchData, searchList } from './action'\n\nfunction App(props) {\n  useEffect(() => {\n    props.fetchData()\n  },[props['page-num-requested']]);\n\n  return (\n    <div className=\"diagnal-app dark:bg-black\">\n      <Header search={props.searchList} keyword={props.search}/>\n      <Body list={props['content-items'] || []} fetchMoreData={props.fetchData}/>\n    </div>\n    \n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    'content-items': state['content-items'],\n    search: state['search']\n  };\n};\n\nexport default connect(mapStateToProps, { fetchData, searchList })(App);\n","/home/qburst/diagnal-app/src/reportWebVitals.js",[],[],"/home/qburst/diagnal-app/src/store/reducer.js",[],[],"/home/qburst/diagnal-app/src/action.js",["56"],[],"import * as types from './types';\n\nexport const fetchData = () =>\nasync (dispatch, getState) => {\n  const state = getState()\n  const currentPage = state['page-num-requested'] || 0\n  fetch(`json/CONTENTLISTINGPAGE-PAGE${+currentPage + 1}.json`\n    ,{\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n    })\n    .then(function(response){\n      return response.json();\n    })\n    .then(function(data) {\n      dispatch({\n        type: types.DATA_RECEIVED,\n        payload: data.page\n      })\n    });\n}\n\nexport const searchList = (keyword) =>\nasync (dispatch, getState) => {\n  const state = getState()\n  const urls = ['json/CONTENTLISTINGPAGE-PAGE1.json', 'json/CONTENTLISTINGPAGE-PAGE2.json', 'json/CONTENTLISTINGPAGE-PAGE3.json'];\n  Promise.all(urls.map((url) => fetch(url).then((e) => e.json()))).then(\n    (data) => { \n        const list = data.flatMap(({page})=> page['content-items']['content']);\n        const result = list.filter(data => data.name.toLowerCase().includes(keyword.toLowerCase()))\n        dispatch({\n          type: types.SEARCH,\n          payload: {keyword, result}\n        })\n    });\n}","/home/qburst/diagnal-app/src/types.js",[],[],"/home/qburst/diagnal-app/src/components/body/index.js",[],[],"/home/qburst/diagnal-app/src/components/header/index.js",[],[],"/home/qburst/diagnal-app/src/components/icon/index.js",[],[],"/home/qburst/diagnal-app/src/components/search/index.js",[],[],{"ruleId":"57","severity":1,"message":"58","line":11,"column":5,"nodeType":"59","endLine":11,"endColumn":34,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":11,"column":6,"nodeType":"62","endLine":11,"endColumn":33},{"ruleId":"63","severity":1,"message":"64","line":27,"column":9,"nodeType":"65","messageId":"66","endLine":27,"endColumn":14},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["67"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar",{"desc":"68","fix":"69"},"Update the dependencies array to be: [props]",{"range":"70","text":"71"},[292,321],"[props]"]